{
  "openapi": "3.0.3",
  "info": {
    "version": "1.00",
    "title": "API-Gateway Documentation",
    "description": "API documentation of DNSTool-Middleware-API[API-Gateway]",
    "contact": {
      "name": "",
      "email": "",
      "url": ""
    }
  },
  "servers": [
    {
      "url": "http://localhost:9999/",
      "description": "Local Development Server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Root Endpoint"
        ],
        "description": "Root endpoint",
        "operationId": "rootEndPoint",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Response of root endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootEndPointResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/zones/{query}": {
      "get": {
        "tags": [
          "Zones Query Endpoint"
        ],
        "description": "Get a list of zones according to the user provided query",
        "operationId": "getZonesList",
        "parameters": [
          {
            "in": "path",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "String to be searched"
          }
        ],
        "responses": {
          "200": {
            "description": "Response of the zones query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZonesQueryResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Registration Endpoint"
        ],
        "description": "Register a user",
        "operationId": "registerUser",
        "parameters": [
        ],
        "requestBody": {
          "description": "Registration user details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response of the registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Email already exists error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAlreadyExistsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/check-email": {
      "post": {
        "tags": [
          "Check Email Endpoint"
        ],
        "description": "Check if the given email is a valid organization email",
        "operationId": "checkEmail",
        "parameters": [
        ],
        "requestBody": {
          "description": "Email address",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response of the check email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization email validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "RootEndPointResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Root Endpoint accessed"
        }
      },
      "ZonesQueryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array"
          }
        },
        "example": {
          "data": [
            ".com",
            ".company"
          ]
        }
      },
      "RegistrationRequest": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "profession": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "full_name": "Nipuna Weerasekara",
          "email": "w.nipuna@gmail.com",
          "organization": "Niweera.inc",
          "profession": "Web Developer",
          "reason": "For education purposes",
          "password": "Super-secret-password"
        }
      },
      "CheckEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "example": {
          "email": "w.nipuna@gmail.com"
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "User account registered successfully"
        }
      },
      "CheckEmailResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "[{email}] is valid and accepted."
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "error message"
        }
      },
      "EmailAlreadyExistsError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "The user with the provided email already exists"
        }
      },
      "EmailValidationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "object"
          }
        },
        "example": {
          "message": {
            "_schema": [
              "[{email}] email domain is not an accepted organization domain."
            ]
          }
        }
      },
      "UnauthorizedError": {
        "type": "string",
        "example": "Unauthorized"
      }
    }
  }
}